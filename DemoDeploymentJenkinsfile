node('nodejs') {
    def project = ""
    try {       
        stage('Deploying to Demo') {
            openshiftTag alias: 'false', apiURL: 'https://kubernetes.default:443', sourceStream: "${project}", sourceTag: 'uat', destinationStream: "${project}", destinationTag: 'demo', authToken: '', destinationAuthToken: '', destinationNamespace: 'aleph-demo', namespace: 'aleph-uat', verbose: 'false'
        }
        stage('Demo Deployment Verification') {
            openshiftVerifyDeployment apiURL: 'https://kubernetes.default:443', authToken: '', depCfg:  "${project}", namespace: 'aleph-demo', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: ''
        }

    }
    catch (err) {
        stage('Mail Notification') {
            echo "Caught: ${err.message}"
            mail (to: '', 
            subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) for Project ${project} has had an error.", 
            body: "Build failed (see ${env.BUILD_URL}): ${err.message}", 
            mimeType:'text/html')
            currentBuild.result = 'FAILURE' 
        }
    }
}