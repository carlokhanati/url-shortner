node('nodejs') {
    def project = ""
    def GitUrl = "git@bitbucket.org:bankaudigroup/${project}.git"
    try {
        
        stage('Checkout') {
            git url: "${GitUrl}", credentialsId: 'gitsecret'
        }
        
        stage('Quality Test') {
            env.PORT=8081
            env.DATABASE_SERVICE_NAME="aleph-mongodb.aleph-sit.svc.cluster.local"
            env.MONGODB_USER="alephuser"
            env.MONGODB_PASSWORD="alephpassword"
            env.MONGODB_DATABASE="aleph"
            env.MONGODB_ADMIN_PASSWORD="p@ssw0rd"
            env.NODE_HTTP_PROTOCOL="http://"
            env.SMTP_SERVER="10.0.1.5"
            env.SMTP_PORT="25"
            env.npm_config_registry="http://nexus3.aleph-nexus.svc.cluster.local:8081/repository/npmjs-public/"
            env.URL_HOST="http://${project}-aleph-sit.dapps.alephlb.com"
            env.ENV_NAME="SIT"
            env.JWT_PUBKEY_HOST="https://api-dev.alephlb.com/oauth/testjwtPubKey"       
            env.FORGEROCK_HOST="https://api-dev.alephlb.com/oauth"
            env.FORGEROCK_APIKEY="9SV3Ixvdn14SJBpuf5SqGW7vftiByrjc"
            env.FORGEROCK_AUTH="Basic dGVzdDp0ZXN0MTIzNA=="

            sh "npm install"
            sh "./node_modules/.bin/mocha --reporter=xunit --reporter-options output=report/unit-test-reports.xml test/controllers/"
        }
        
        stage('Build and Deploy SIT') {
            sh "oc project aleph-sit"

            sh "oc set env bc/${project} MONGODB_USER=alephuser"
            sh "oc set env bc/${project} MONGODB_PASSWORD=alephpassword"
            sh "oc set env bc/${project} MONGODB_DATABASE=aleph"
            sh "oc set env bc/${project} MONGODB_ADMIN_PASSWORD=p@ssw0rd"
            sh "oc set env bc/${project} DATABASE_SERVICE_NAME=aleph-mongodb"
            sh "oc set env bc/${project} NODE_HTTP_PROTOCOL='http://'"
            sh "oc set env bc/${project} SMTP_SERVER=10.0.1.5"
            sh "oc set env bc/${project} SMTP_PORT='25'"
            sh "oc set env bc/${project} npm_config_registry='http://nexus3.aleph-nexus.svc.cluster.local:8081/repository/npmjs-public/'"
            sh "oc set env bc/${project} ENV_NAME=SIT"
            sh "oc set env bc/${project} JWT_PUBKEY_HOST=https://api-dev.alephlb.com/oauth/testjwtPubKey"
            sh "oc set env bc/${project} FORGEROCK_HOST=https://api-dev.alephlb.com/oauth"
            sh "oc set env bc/${project} FORGEROCK_APIKEY='9SV3Ixvdn14SJBpuf5SqGW7vftiByrjc'"
            sh "oc set env bc/${project} FORGEROCK_AUTH='Basic dGVzdDp0ZXN0MTIzNA=='"
            
            sh "oc set env dc/${project} MONGODB_USER=alephuser"
            sh "oc set env dc/${project} MONGODB_PASSWORD=alephpassword"
            sh "oc set env dc/${project} MONGODB_DATABASE=aleph"
            sh "oc set env dc/${project} MONGODB_ADMIN_PASSWORD=p@ssw0rd"
            sh "oc set env dc/${project} DATABASE_SERVICE_NAME=aleph-mongodb"
            sh "oc set env dc/${project} NODE_HTTP_PROTOCOL='http://'"
            sh "oc set env dc/${project} SMTP_SERVER=10.0.1.5"
            sh "oc set env dc/${project} SMTP_PORT='25'"
            sh "oc set env dc/${project} npm_config_registry='http://nexus3.aleph-nexus.svc.cluster.local:8081/repository/npmjs-public/'"
            sh "oc set env dc/${project} ENV_NAME=SIT"
            sh "oc set env dc/${project} JWT_PUBKEY_HOST=https://api-dev.alephlb.com/oauth/testjwtPubKey"
            sh "oc set env dc/${project} FORGEROCK_HOST=https://api-dev.alephlb.com/oauth"
            sh "oc set env dc/${project} FORGEROCK_APIKEY='9SV3Ixvdn14SJBpuf5SqGW7vftiByrjc'"
            sh "oc set env dc/${project} FORGEROCK_AUTH='Basic dGVzdDp0ZXN0MTIzNA=='"
            
            openshiftBuild apiURL: 'https://kubernetes.default:443', authToken: '', bldCfg: "${project}", buildName: '', checkForTriggeredDeployments: 'false', commitID: '', namespace: 'aleph-sit', showBuildLogs: 'false', verbose: 'false', waitTime: '', waitUnit: 'sec'
        }

        stage('SIT Deployment Verification') {
            openshiftVerifyDeployment apiURL: 'https://kubernetes.default:443', authToken: '', depCfg: "${project}", namespace: 'aleph-sit', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: ''
        }
    
        stage('Integration Test') {
            sh "./node_modules/.bin/mocha --reporter=xunit --reporter-options output=report/integration-test-reports.xml -t 10000 test/integration/"
        }

        stage('Deploying to UAT') {
            openshiftTag alias: 'false', apiURL: 'https://kubernetes.default:443', sourceStream: "${project}", sourceTag: 'latest', destinationStream: "${project}", destinationTag: 'uat', authToken: '', destinationAuthToken: '', destinationNamespace: 'aleph-uat', namespace: 'aleph-sit', verbose: 'false'
        }

        stage('UAT Deployment Verification') {
            openshiftVerifyDeployment apiURL: 'https://kubernetes.default:443', authToken: '', depCfg:  "${project}", namespace: 'aleph-uat', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: ''
        }

    }
    catch (err) {
        stage('Mail Notification') {
            echo "Caught: ${err.message}"
            mail (to: '', 
            subject: "Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) for Project ${project} has had an error.", 
            body: "Build failed (see ${env.BUILD_URL}): ${err.message}", 
            mimeType:'text/html') 
            currentBuild.result = 'FAILURE' 
        }
    }
    finally {
        stage('Code Coverage and Unit Report') {
            junit allowEmptyResults: true, testResults: '**/report/unit-test-reports.xml'
            junit allowEmptyResults: true, testResults: '**/report/integration-test-reports.xml'
            sh "./node_modules/.bin/istanbul cover --report html node_modules/mocha/bin/_mocha -- -i test/"
            sh "./node_modules/.bin/istanbul check-coverage --lines 1"
            publishHTML([allowMissing: true, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'coverage', reportFiles: 'index.html', reportName: 'Code Coverage'])
        }
    }
}